#!/usr/bin/env nodejs
const fs = require('fs')
const https = require('https')
const { promisify } = require('util')
const writeFile = promisify(fs.writeFile.bind(fs))
const readFile = promisify(fs.readFile.bind(fs))
const httpsGet = args => new Promise((resolve, reject) => https.get(args, resolve).on('error', reject))

const [AUTH_KEYS_PATH, GITHUB_USER_RAW, GITHUB_USER_HASHED] = process.argv.slice(2)
if (!(AUTH_KEYS_PATH && GITHUB_USER_RAW)) {
	console.error(`Usage: beamup-sync-keys <path to authorized_keys> <GitHub username>`)
	process.exit(1)
}
const GITHUB_USER = GITHUB_USER_RAW.toLowerCase()

if (isBanned(GITHUB_USER)) {
	console.error(`GitHub user ${GITHUB_USER} is banned`)
	process.exit(1)
}

async function fetchKeys(githubUser) {
	const res = await httpsGet(`https://github.com/${githubUser}.keys`)
	if (res.statusCode !== 200) throw new Error(`GitHub returned status ${res.status}`)
	res.setEncoding('utf8')
	return new Promise((resolve, reject) => {
		let body = ''
		res.on('data', d => body += d)
		res.on('error', reject)
		res.on('end', () => resolve(body))
	})
}

async function getNewAuthKeysContent() {
	const [content, keys] = await Promise.all([
		readFile(AUTH_KEYS_PATH),
		fetchKeys(GITHUB_USER)
	])
	const commandStr = `command="GITHUB_USER='${GITHUB_USER_HASHED}' beamup-entry $SSH_ORIGINAL_COMMAND"`
	const minusOldKeys = content.toString().split('\n').filter(x => !x.startsWith(commandStr) && x.trim())
	const newKeys = keys.split('\n').filter(x => x).map(key => `${commandStr},restrict ${key}`)
	return minusOldKeys.concat(newKeys).join('\n') + '\n'
}

getNewAuthKeysContent()
	.then(content => writeFile(AUTH_KEYS_PATH, content))
	.catch(e => {
		console.error(`Encountered error, quitting`)
		console.error(e)
		process.exit(2)
	})

function isBanned(githubUser) {
	try {
		const users = fs.readFileSync(banList, 'utf8');
		return users.toString().split('\n').includes(githubUser);
	} catch (err) {
		//if the banlist file doesn't exist
		return false;
	}
}