#!/usr/bin/env bash

# This script bans a GitHub user by removing their public key from the authorized_keys file
# and adding their hashed GitHub username to the ban list.
# It creates a backup of authorized_keys and logs actions to /var/log/ban-user.log.
#
# Usage: sudo ./ban-user <github_user_hashed>

# Ensure the script is run with sudo
if [ "$EUID" -ne 0 ]; then
    echo "Please run as root using sudo"
    exit 1
fi

# Check if the correct number of arguments is provided
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <github_user_hashed>"
    exit 1
fi

AUTH_KEYS_PATH="/home/dokku/.ssh/authorized_keys"
BACKUP_DIR="/home/dokku/.ssh/backups" # Directory to store backups
LOG_FILE="/var/log/ban-user.log"      # Log file path
github_user_hashed=$1
BAN_LIST="/etc/beamup/ban_list.txt"

# Prompt user for confirmation
read -p "Are you sure you want to ban the user with hash $github_user_hashed? (y/n): " confirm
if [[ "$confirm" != "y" ]]; then
    echo "Operation cancelled."
    exit 0
fi

# Create the backup directory if it doesn't exist
if [ ! -d "$BACKUP_DIR" ]; then
    echo "Creating backup directory $BACKUP_DIR"
    mkdir -p "$BACKUP_DIR"
fi

# Backup the authorized_keys file
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_FILE="$BACKUP_DIR/authorized_keys_backup_$TIMESTAMP"
cp "$AUTH_KEYS_PATH" "$BACKUP_FILE"
echo "Backup of authorized_keys created at $BACKUP_FILE"

# Log the backup action
echo "$(date): Backup of authorized_keys created at $BACKUP_FILE" >> "$LOG_FILE"

# Get the directory from the file path
DIR=$(dirname "$BAN_LIST")

# Check if the directory exists, if not, create it
if [ ! -d "$DIR" ]; then
    echo "Directory $DIR does not exist. Creating it."
    mkdir -p "$DIR"
    chmod 755 "$DIR"
    echo "$(date): Created directory $DIR" >> "$LOG_FILE"
else
    echo "Directory $DIR already exists."
fi

# Check if the file exists, if not, create it
if [ ! -f "$BAN_LIST" ]; then
    echo "File $BAN_LIST does not exist. Creating it."
    touch "$BAN_LIST"
    echo "$(date): Created file $BAN_LIST" >> "$LOG_FILE"
else
    echo "File $BAN_LIST already exists."
fi

# Check if the github_user_hashed is already in the ban_list
if grep -q "$github_user_hashed" "$BAN_LIST"; then
    echo "$github_user_hashed is already banned."
else
    echo "$github_user_hashed" >> "$BAN_LIST"
    echo "$github_user_hashed has been added to the ban list."
    echo "$(date): $github_user_hashed added to ban list $BAN_LIST" >> "$LOG_FILE"
fi

# Check and delete the line containing GITHUB_USER='$github_user_hashed' from the authorized_keys file

if [ -f "$AUTH_KEYS_PATH" ]; then
    # Create a temporary file to store the updated authorized_keys
    temp_file=$(mktemp)

    # Read through the authorized_keys file and write all lines except the one to be deleted to the temp file
    while IFS= read -r line; do
        if [[ "$line" != *"GITHUB_USER='$github_user_hashed'"* ]]; then
            echo "$line" >> "$temp_file"
        fi
    done < "$AUTH_KEYS_PATH"

    # Replace the original authorized_keys with the updated one
    if mv "$temp_file" "$AUTH_KEYS_PATH"; then
        echo "Removed GITHUB_USER='$github_user_hashed' from $AUTH_KEYS_PATH."
        chmod 600 "$AUTH_KEYS_PATH"
        chown dokku:dokku "$AUTH_KEYS_PATH"
        echo "$(date): Removed GITHUB_USER='$github_user_hashed' from $AUTH_KEYS_PATH" >> "$LOG_FILE"
    else
        echo "Failed to update $AUTH_KEYS_PATH."
        rm -f "$temp_file"
        echo "$(date): Failed to update $AUTH_KEYS_PATH" >> "$LOG_FILE"
        exit 1
    fi
else
    echo "$AUTH_KEYS_PATH does not exist."
    echo "$(date): $AUTH_KEYS_PATH does not exist." >> "$LOG_FILE"
fi
