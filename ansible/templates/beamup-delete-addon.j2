#!/bin/bash

: '
Script Name: beamup-delete-addon.sh
Description:
    Securely deletes an addon from BeamUp by removing it from:
      - **Docker Registry** (removes images)
      - **Dokku** (destroys the app)
      - **Cloudflare DNS** (removes DNS records)
      - **Nginx & Docker Swarm** (verifies cleanup)

Usage:
    ./beamup-delete-addon.sh [--force] <addon_name>

Options:
    --force          Skips confirmation prompt.

Security:
    - **Strict name validation**: Only allows letters, numbers, and dashes.
    - **Cloudflare credentials** securely retrieved from the Swarm server.
    - **Verifies successful deletion** at every step.

Process:
    1. **Validate input** (exit if invalid).
    2. **Retrieve Cloudflare credentials** (exit if missing).
    3. **Delete from Docker Registry**.
    4. **Destroy Dokku app** (only if it exists).
    5. **Sync Swarm & restart Nginx**.
    6. **Remove Cloudflare DNS record**.
    7. **Final cleanup checks** (Nginx, Swarm, containers).

Prerequisites:
    - `jq` installed, SSH access, sufficient permissions.
    - This script must be run with user dokku

TODO:
    - Improve error handling.
    - Consider migrating to **Ansible**.

Disclaimers:
    - **No check if the addon is actively running before deletion**.
'

# VARIABLES

# Set server and domain variables
#DOKKU_SERVER="beamup@stremio-beamup-deployer"
SWARM_SERVER="beamup@stremio-beamup-swarm-0"
#TODO: This needs to be dynamic
DOMAIN="{{ domain }}"  # Set your domain here

# Other vars:
DOCKER_REGISTRY_SERVER=$SWARM_SERVER
TIME_TO_WAIT=30
TOTAL_APP_LIMIT=400
DOKKU_SSH_PRIVATE_KEY=/home/dokku/.ssh/id_ed25519
LOG_FILE="/home/dokku/beamup-delete-addon.log"

# Redirect all script output (stdout & stderr) to log file
exec > >(tee -a "$LOG_FILE") 2>&1

FORCE_MODE=false

# Check if --force is passed
if [[ "$1" == "--force" ]]; then
    FORCE_MODE=true
    shift  # Remove --force from arguments
fi

# Validate that exactly one argument (the addon name) is now present
if [[ $# -ne 1 ]]; then
    usage
fi

# Store the remaining argument as the addon name
ADDON_NAME="$1"

echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] beamup-delete-addon: Starting addon removal process for '$ADDON_NAME'"

# Validate the addon name again
if [[ -z "$ADDON_NAME" ]]; then
    echo "Error: Addon name cannot be empty."
    exit 1
fi

# Confirmation prompt
if [[ "$FORCE_MODE" == false ]]; then
    read -p "Do you want to continue with these settings? (yes/no): " confirmation
    if [[ "$confirmation" != "yes" ]]; then
        echo "Operation aborted by user."
        exit 1
    fi
fi

# Fetch Cloudflare credentials from SWARM server
CLOUDFLARE_API_TOKEN=$(ssh -i $DOKKU_SSH_PRIVATE_KEY -q $SWARM_SERVER "grep -oP 'CF_TOKEN=\K[^ ]+' /home/beamup/beamup-sync-swarm.sh")
CLOUDFLARE_ZONE_ID=$(ssh -i $DOKKU_SSH_PRIVATE_KEY -q $SWARM_SERVER "grep -oP 'CF_ZONE_ID=\K[^ ]+' /home/beamup/beamup-sync-swarm.sh")

# Validate that credentials were retrieved
if [[ -z "$CLOUDFLARE_API_TOKEN" || -z "$CLOUDFLARE_ZONE_ID" ]]; then
    echo "ERROR: Failed to retrieve Cloudflare credentials from SWARM server."
    exit 1
fi




# FUNCTIONS

# Function to display usage message
usage() {
    echo "Usage: $0 [--force] addon_name"
    echo "  addon_name: Name of the addon to delete"
    echo "  Please quote the addon name to prevent globbing."
    exit 1
}

# Function to validate addon name
validate_addon_name() {
    local addon_name=$1
    # Check for empty input
    if [[ -z $addon_name ]]; then
        echo "Invalid input: Addon name cannot be empty."
        exit 1
    fi
    # Another check
    if [[ ! "$ADDON_NAME" =~ ^[a-zA-Z0-9-]*$ ]]; then
        echo "ERROR: Invalid addon name. Only letters, numbers, and dashes are allowed."
        exit 1
    fi

    # Check if the addon name contains an asterisk '*'
    if [[ $addon_name == *"*"* ]]; then
        echo "Invalid input: Asterisks (*) are not allowed in the addon name."
        exit 1
    fi
    # Check if the addon name contains a full stop '.'
    if [[ $addon_name == *"."* ]]; then
        echo "Invalid input: Full stops (.) are not allowed in the addon name."
        exit 1
    fi
    # Check no strange character is used
    if [[ ! $addon_name =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "Error: Invalid addon name. Addon names must only contain letters, numbers, underscores, or dashes."
    exit 1
fi
}

# Function to get CloudFlare Domain from Zone ID
get_cloudflare_domain() {
    local response=$(curl -s "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID" \
         -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
         -H "Content-Type: application/json")
    echo $response | jq -r '.result.name'
}

# Function to delete from Docker Registry with verification
delete_from_docker_registry() {
    echo
    echo "------------------------------------------"
    echo "Deleting from Docker Registry..."
    if ! ssh -i $DOKKU_SSH_PRIVATE_KEY -q $DOCKER_REGISTRY_SERVER "sudo rm -rf /var/lib/registry/docker/registry/v2/repositories/dokku/$ADDON_NAME/"; then
        echo "Error: Failed to delete repository in Docker Registry."
        exit 1
    fi

    # Verification
    if ssh -i $DOKKU_SSH_PRIVATE_KEY -q $DOCKER_REGISTRY_SERVER "curl -s http://localhost:5000/v2/_catalog?n=${TOTAL_APP_LIMIT} | jq -e '.repositories[] | select(. == \"dokku/$ADDON_NAME\")'"; then
        echo "Error: Repository still exists in Docker Registry."
        exit 1
    else
        echo "Repository successfully deleted from Docker Registry."
        echo "------------------------------------------"
        echo
    fi
}

# Function to delete from Dokku with verification
delete_from_dokku() {
    echo "------------------------------------------"
    echo "Deleting from Dokku..."
    if ! dokku --force apps:destroy $ADDON_NAME; then
        echo "Error: Failed to destroy app in Dokku."
        exit 1
    fi

    # Verification
    if dokku apps:exists $ADDON_NAME &>/dev/null; then
        echo "Error: App still exists in Dokku."
        exit 1
    else
        echo "App successfully destroyed in Dokku."
        echo "------------------------------------------"
        echo
    fi
}

# Function to trigger sync
trigger_sync() {
    echo "------------------------------------------"
    echo "Triggering sync..."
    ssh -q -i /home/dokku/.ssh/id_ed25519_sync beamup@stremio-beamup-swarm-0 sync || { echo "Error: SSH command failed."; exit 1; }

    echo
    echo "Waiting $TIME_TO_WAIT seconds for docker swarm to update its tasks"
    sleep $TIME_TO_WAIT

    echo "Sync finished"
    echo "------------------------------------------"
    echo
}

# Function to get CloudFlare DNS record ID
get_cloudflare_dns_record_id() {
    local record_name="$ADDON_NAME.$DOMAIN"
    local response=$(curl -s "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records?type=A&name=$record_name" \
         -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
         -H "Content-Type: application/json")
    echo $response | jq -r '.result[0].id'
}

# Function to delete CloudFlare DNS record
delete_cloudflare_dns() {
    echo "------------------------------------------"
    echo "Finding CloudFlare DNS record ID for $ADDON_NAME.$DOMAIN"
    local dns_record_id=$(get_cloudflare_dns_record_id)
    if [ -z "$dns_record_id" ]; then
        echo "Error: Unable to find DNS record ID for $ADDON_NAME."
        exit 1
    fi

    echo "Deleting CloudFlare DNS record with ID $dns_record_id"
    local response_code=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records/$dns_record_id" \
         -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
         -H "Content-Type: application/json")
    if [ "$response_code" != "200" ]; then
        echo "Error: Failed to delete DNS record. HTTP response code: $response_code"
        exit 1
    else
        echo "DNS record successfully deleted."
        echo "------------------------------------------"
        echo
    fi
}

# Function to verify CloudFlare record deletion
verify_dns_record_deletion_by_name() {
    echo "Verifying removal from CloudFlare..."
    local record_name="$ADDON_NAME.$DOMAIN"
    local response=$(curl -s "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records?type=A&name=$record_name" \
         -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
         -H "Content-Type: application/json")

    # Check if the record still exists
    local record_exists=$(echo $response | jq -r '.result | length')
    if [[ $record_exists -eq 0 ]]; then
        echo "- DNS record for $record_name successfully deleted."
        echo
    else
        echo "Error: DNS record for $record_name still exists."
        exit 1
    fi
}

# Function to verify everything
verification_process() {
    # Verification steps
    echo "Verifying removal from Nginx configurations..."
    if ssh -i $DOKKU_SSH_PRIVATE_KEY -q $SWARM_SERVER "grep -Riw 'upstream $ADDON_NAME ' /etc/nginx/"; then
        echo "Error: Nginx configuration for $ADDON_NAME still exists."
        exit 1
    else
        echo "- Nginx configuration for $ADDON_NAME successfully removed."
        echo
    fi

    echo "Verifying removal from Docker Swarm services..."
    if ssh -i $DOKKU_SSH_PRIVATE_KEY -q $SWARM_SERVER "docker service ls | awk '{print \$2}' | grep -i '^$ADDON_NAME\$'"; then
        echo "Error: Service for $ADDON_NAME still exists in Docker Swarm."
        exit 1
    else
        echo "- Service for $ADDON_NAME successfully removed from Docker Swarm."
        echo
    fi

    echo "Verifying no running containers for $ADDON_NAME..."
    if ssh -i $DOKKU_SSH_PRIVATE_KEY -q $SWARM_SERVER "docker ps | awk '{print \$2}' | awk -F '/' '{print \$3}' | awk -F ':' '{print $1}' | grep -i '^$ADDON_NAME\$'"; then
        echo "Error: Containers for $ADDON_NAME are still running."
        exit 1
    else
        echo "- No running containers for $ADDON_NAME."
        echo
    fi

    verify_dns_record_deletion_by_name
}

# Main execution

ADDON_NAME="$1"
validate_addon_name "$ADDON_NAME"

# Display key variables for verification
echo "Running script with the following settings:"
echo "Addon Name: $ADDON_NAME"
echo "Swarm Server: $SWARM_SERVER"
echo "Docker Registry Server: $DOCKER_REGISTRY_SERVER"
#echo "Dokku Server: $DOKKU_SERVER"
echo "Domain: $DOMAIN"
#echo "CloudFlare Zone ID: $CLOUDFLARE_ZONE_ID"
CLOUDFLARE_DOMAIN=$(get_cloudflare_domain)
echo "CloudFlare Domain: $CLOUDFLARE_DOMAIN"
# Optionally hide the token display for security
# echo "CloudFlare API Token: $CLOUDFLARE_API_TOKEN"
echo "------------------------------------------"


delete_from_docker_registry
delete_from_dokku
trigger_sync
delete_cloudflare_dns
verification_process

# A bit of extra security
unset CLOUDFLARE_API_TOKEN=""
unset DOKKU_SSH_PRIVATE_KEY=""

echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] beamup-delete-addon: Addon removal process completed successfully for '$ADDON_NAME'"
