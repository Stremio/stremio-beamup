#!/usr/bin/env nodejs

const fs = require('fs')
const http = require('http')
const https = require('https')
const request = (http, args) => new Promise((resolve, reject) => http.request(args, resolve).on('error', reject).end(args.body))

const START_PORT = 8000
const TOTAL_APP_LIMIT = 300
const REGISTRY_URL = 'http://127.0.0.1:5000'

// https://docs.docker.com/compose/compose-file/04-version-and-name/#version-top-level-element-obsolete
// Compose Specification is being used
const HEADER = `services:`

// @TODO: assigning a random port may not be needed, just use the docker overlay network to reach the container (use it's IP)
// @TODO: syslog for centralized log collection
// @TODO implement a way so services are started after the registry, something like the depends_on
const APP_TMPL = (appName, image, port) => `   ${appName}:
        image: ${image}
        deploy:
          resources:
            limits:
              cpus: '1.2'
              memory: 1024M
            reservations:
              cpus: '0.1'
              memory: 64M
          restart_policy:
              max_attempts: 10
              window: 5m
              delay: 60s
        environment:
          - PORT=${port}
        command: /start web
        ports:
          - '${port}:${port}'
`

const APP_DOCKER_TMPL = (appName, image, port) => `   ${appName}:
        image: ${image}
        deploy:
          resources:
            limits:
              cpus: '1.2'
              memory: 1024M
            reservations:
              cpus: '0.1'
              memory: 64M
          restart_policy:
              max_attempts: 10
              window: 5m
              delay: 60s
        environment:
          - PORT=${port}
        ports:
          - '${port}:${port}'
`

// https://github.com/docker-archive/for-aws/issues/104
// Creating network of /16 because of above issue
const networkCfg = `networks:
  default:
    driver: overlay
    ipam:
      config:
        - subnet: 10.2.0.0/16
`

const APP_NGINX_TMPL = (appName, port) => `proxy_cache_path /var/lib/nginx/cache_${appName} levels=1:2 keys_zone=${appName}_cache:10m max_size=1g inactive=600m use_temp_path=off;
upstream ${appName} {
        server 127.0.0.1:${port};
        keepalive 300;
}

server {
        server_name ~^${appName}.;
        access_log     /var/log/nginx/nginx.vhost.access.log;
        error_log      /var/log/nginx/nginx.vhost.error.log;
        #listen     443;
        #ssl        on;
        #ssl_certificate  /etc/nginx/cert.pem;
        #ssl_certificate_key /etc/nginx/cert.key;
        listen 80;
        location / {
                if ($request_method = 'OPTIONS') {
                       add_header 'Access-Control-Allow-Origin' '*';
                       add_header 'Access-Control-Allow-Methods' 'GET,HEAD,PUT,PATCH,POST,DELETE';
                       # 2 days
                       add_header 'Access-Control-Max-Age' 172800;
                       return 204;
                }
                proxy_pass http://${appName};
                proxy_http_version 1.1;
                proxy_set_header Connection "";
                proxy_cache ${appName}_cache;
                proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504 updating;
                # this setting is too much, cause with two layers of cache it means that the top layer will index a stale resp
                #proxy_cache_background_update on;
                proxy_cache_lock on;
                proxy_hide_header X-Powered-By;
                proxy_buffering on;
                proxy_cache_valid 200 302 2h;
                add_header X-Cache-Status $upstream_cache_status;
        }
}

`

async function getJSON(http, opts) {
	const res = await request(http, opts)
	if (res.statusCode !== 200) {
		if (opts.hostname != 'api.cloudflare.com') {
			console.log(opts)
			throw new Error(`returned status ${res.statusCode}`)
		}
	}
	res.setEncoding('utf8')
	return new Promise((resolve, reject) => {
		let body = ''
		res.on('data', d => body += d)
		res.on('error', reject)
		res.on('end', () => resolve(JSON.parse(body)))
	})

}

async function getImages() {
	return await getJSON(http, `${REGISTRY_URL}/v2/_catalog?n=${TOTAL_APP_LIMIT}`)
}

async function getPortMapping() {
	const services = await getJSON(http, { socketPath: '/var/run/docker.sock', path: '/services' })
	let ports = {}
	services.forEach(service => {
		const { TargetPort, PublishedPort } = service.Endpoint.Ports[0]
		// @TODO: better imageName?
		const imageName = service.Spec.Labels['com.docker.stack.image']
		if (TargetPort === PublishedPort) ports[imageName] = TargetPort
	})
	return ports
}

async function getConfigs() {
	const [{ repositories }, portMapping] = await Promise.all([getImages(), getPortMapping()])
	let startPort = Math.max.apply(null, Object.values(portMapping)) || START_PORT
	const apps = repositories.map(imageName => {
		const name = imageName.split('/').pop()
		const fullImageName = `localhost:5000/${imageName}:latest`
		const port = portMapping[imageName] || portMapping[fullImageName] || ++startPort
		return { name, fullImageName, port }
	})
	if (apps.length > TOTAL_APP_LIMIT) throw new Error('app limit exceeded')
	const swarmHerokuishCfgs = apps.filter(app => !app.name.includes('docker')).map(app => APP_TMPL(app.name, app.fullImageName, app.port))
	const swarmDockerfileCfgs = apps.filter(app => app.name.includes('docker')).map(app => APP_DOCKER_TMPL(app.name, app.fullImageName, app.port))
	const swarmCfgs = swarmHerokuishCfgs.concat(swarmDockerfileCfgs)
//	const swarmCfgs = swarmHerokuishCfgs.concat(swarmDockerfileCfgs,networkCfg)
	const nginxCfgs = apps.map(app => APP_NGINX_TMPL(app.name, app.port))
	return {
		swarm: [HEADER].concat(swarmCfgs).join('\n'),
		nginx: nginxCfgs.join('\n'),
		apps
	}
}

const swarmCfg = process.argv[2]
const nginxCfg = process.argv[3]
if (!(swarmCfg && swarmCfg.endsWith('.yaml') && nginxCfg && nginxCfg.endsWith('.conf'))) {
	console.log('usage: beamup-sync-swarm <path to swarm yaml> <path to nginx config>')
	process.exit(1)
}
getConfigs().then(cfgs => {
	fs.writeFileSync(swarmCfg, cfgs.swarm)
	fs.writeFileSync(nginxCfg, cfgs.nginx)
	if (process.env.CF_TOKEN && process.env.CF_ORIGIN_IPS && process.env.CF_ZONE_ID) {
		const ips = process.env.CF_ORIGIN_IPS.split(',')
		cfgs.apps.forEach(app => {
			// @TODO: err handling, taking care of old records
			ips.forEach(ip => {
				const body = JSON.stringify({ type: 'A', name: app.name, content: ip, ttl: 120, proxied: true })
				getJSON(https, {
					hostname: 'api.cloudflare.com',
					path: `/client/v4/zones/${process.env.CF_ZONE_ID}/dns_records`,
					headers: {
						'content-type': 'application/json',
						authorization: `Bearer ${process.env.CF_TOKEN}`
					},
					method: 'POST',
					body
				})
			})
		})
	}
})
